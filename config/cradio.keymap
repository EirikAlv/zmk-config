// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k2,k3,k4) &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3
#define WHRML(k2,k3,k4) &ht LALT k2  &ht LGUI k3  &ht LCTRL k4
#define WHRMR(k1,k2,k3) &ht RCTRL k1  &ht RGUI k2  &ht RALT k3

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hmlr: hmlr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 11 12 13 14 10 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp Q  &kp W                 &kp E             &kp R                 &kp T           &kp Y               &kp U                  &kp I                 &hmlr LC(LG(LEFT_ALT)) O  &kp P
&kp A  &hmlr LEFT_CONTROL S  &hmlr LEFT_ALT D  &hmlr LEFT_COMMAND F  &kp G           &kp H               &kp J                  &kp K                 &kp L                     &kp ESCAPE
&kp Z  &kp X                 &kp C             &kp V                 &kp B           &kp N               &hmlr RIGHT_COMMAND M  &hmlr LEFT_ALT COMMA  &hmlr RIGHT_CONTROL DOT   &kp BACKSPACE
                                               &kp LSHIFT            &lt 1 ESCAPE    &hmlr RSHIFT SPACE  &lt 2 TAB
            >;
        };

        left-layer {
            bindings = <
&trans  &kp N7  &kp N8  &kp N9  &trans    &trans     &trans    &trans  &trans     &kp TAB
&kp N0  &kp N4  &kp N5  &kp N6  &trans    &kp LEFT   &kp DOWN  &kp UP  &kp RIGHT  &kp BSPC
&trans  &kp N1  &kp N2  &kp N3  &trans    &trans     &trans    &trans  &trans     &trans
                        &trans  &trans    &kp ENTER  &kp TAB
            >;
        };

        right-layer {
            bindings = <
&kp QUESTION       &kp AT           &kp HASH           &kp DOLLAR             &kp PRCNT    &kp CARET      &kp AMPERSAND    &kp ASTERISK  &kp TILDE  &trans
&kp SINGLE_QUOTE   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &trans       &kp SLASH      &kp EXCLAMATION  &kp EQUAL     &kp COLON  &kp SEMICOLON
&kp DOUBLE_QUOTES  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &trans       &kp BACKSLASH  &kp UNDERSCORE   &kp MINUS     &kp PLUS   &kp PIPE
                                                       &trans                 &trans       &trans         &trans
            >;
        };

        number-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &kp N7  &kp N8  &kp N9  &kp BACKSPACE
&trans  &trans  &trans  &trans  &trans    &trans  &kp N4  &kp N5  &kp N6  &kp N0
&trans  &trans  &trans  &trans  &trans    &trans  &kp N1  &kp N2  &kp N3  &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        utilities_layer {
            bindings = <
&bt BT_PRV    &bt BT_NXT    &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans  &trans  &kp U     &trans  &trans  &trans  &trans  &trans
                                    &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        utilites-layer-conditional {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
